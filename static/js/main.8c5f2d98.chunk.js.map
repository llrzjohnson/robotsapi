{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","id","name","city","email","className","alt","src","value","CardList","robots","map","user","i","key","address","geo","lat","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8c5f2d98.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({id, name, city, email}) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n            <img alt=\"robots\" src={`https://flathash.com/${id}?200x200`} />\r\n            <div>\r\n                <h2 value={city}>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) =>{\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user, i)=>{\r\n                    return(\r\n                        <Card \r\n                        key={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                        city={robots[i].address.geo.lat}\r\n                        />       \r\n                    )\r\n                })\r\n            }    \r\n        </div>\r\n    )\r\n}\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='search robots' \r\n        onChange = {searchChange}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react'\r\n\r\nconst Scroll = (props)=> {\r\n    return (\r\n\r\n        <div style={{overflowY:'scroll', border:'1px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Scroll\r\n","import React, { Component } from 'react'\r\n\r\nexport class ErrorBoundry extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.state.hasError){\r\n            return (\r\n                <div>\r\n                   <h1>Error Encountered</h1> \r\n                </div>\r\n            )\r\n        }\r\n\r\n        return this.props.children\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry\r\n","import React, { Component } from 'react'\r\n\r\nclass CounterButton extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            count:0\r\n        }\r\n    }\r\n\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return true;\r\n    }\r\n\r\n    updateCount = () =>{\r\n        this.setState(state => {\r\n           return {count: state.count + 1}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n             <button color={this.props.color} onClick={this.updateCount}>\r\n             Count: {this.state.count}\r\n             </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color={'red'}/>\r\n             </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\"\r\nimport ErrorBoundry from \"../components/ErrorBoundry\"\r\nimport Header from \"../components/Header\"\r\nimport './App.css'\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange:(event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n\r\n}\r\n\r\nexport class App extends Component {\r\n   \r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n\r\n        const filteredRobots = robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n\r\n        return isPending ? <h1>Loading</h1>:\r\n        (\r\n            <div className='tc'>\r\n                <Header />\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                <ErrorBoundry>\r\n                    <CardList robots={filteredRobots}/>\r\n                </ErrorBoundry>\r\n            </Scroll>\r\n        </div>\r\n        )\r\n        }\r\n    }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n\r\n\r\n\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data=> dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField:''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField:action.payload})\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots:[],\r\n    error:''\r\n}\r\n\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending:true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots:action.payload, isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error:action.payload, isPending:false})\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from \"redux-logger\";\r\nimport App from './containers/App';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n//const logger = createLogger();\r\n\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nReactDOM.render(\r\n    <Provider store = {store}>\r\n    <App />\r\n    </Provider>\r\n    ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}